import torch
import torch.nn as nn
import torch.nn.functional as F
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

class IrisClassifier(nn.Module):
    def __init__(self, input_size=4, hidden1=8, hidden2=9, output_size=3):
        super().__init__()
        self.layer1 = nn.Linear(input_size, hidden1)
        self.layer2 = nn.Linear(hidden1, hidden2)
        self.output_layer = nn.Linear(hidden2, output_size)

    def forward(self, x):
        x = F.relu(self.layer1(x))
        x = F.relu(self.layer2(x))
        x = self.output_layer(x)
        return x

torch.manual_seed(41)

model = IrisClassifier()

dataset_url = "https://gist.githubusercontent.com/Thanatoz-1/9e7fdfb8189f0cdf5d73a494e4a6392a/raw/aaecbd14aeaa468cd749528f291aa8a30c2ea09e/iris_dataset.csv"
iris_df = pd.read_csv(dataset_url)

label_map = {"Iris-virginica": 0, "Iris-versicolor": 1, "Iris-setosa": 2}
iris_df["target"] = iris_df["target"].map(label_map)

features = iris_df.drop(columns=["target"]).values
labels = iris_df["target"].values.astype(int)

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=41)

X_train_t = torch.FloatTensor(X_train)
X_test_t = torch.FloatTensor(X_test)
y_train_t = torch.LongTensor(y_train)
y_test_t = torch.LongTensor(y_test)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

epochs = 100
loss_history = []
accuracy_history = []

for epoch in range(epochs):
    outputs = model(X_train_t)
    loss = criterion(outputs, y_train_t)
    loss_history.append(loss.item())

    if epoch % 10 == 0:
        predicted_classes = torch.argmax(outputs, dim=1)
        accuracy = (predicted_classes == y_train_t).float().mean().item() * 100
        accuracy_history.append(accuracy)
        print(f"Epoch {epoch} - Loss: {loss.item():.4f}, Accuracy: {accuracy:.2f}%")

    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

plt.figure(figsize=(10,4))
plt.plot(loss_history, label='Training Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training Loss over Epochs')
plt.legend()
plt.show()

plt.figure(figsize=(10,4))
plt.plot(range(0, epochs, 10), accuracy_history, label='Training Accuracy', color='green')
plt.xlabel('Epochs')
plt.ylabel('Accuracy (%)')
plt.title('Training Accuracy over Epochs')
plt.legend()
plt.show()

model.eval()
with torch.no_grad():
    test_outputs = model(X_test_t)
    test_loss = criterion(test_outputs, y_test_t)
    predicted_test = torch.argmax(test_outputs, dim=1)
    test_accuracy = (predicted_test == y_test_t).float().mean().item() * 100

print(f"Test Loss: {test_loss.item():.4f}")
print(f"Test Accuracy: {test_accuracy:.2f}%")

new_sample = torch.tensor([[4.7, 3.2, 1.3, 0.2]])
with torch.no_grad():
    prediction = model(new_sample)
    predicted_label = prediction.argmax(dim=1).item()
print(f"Prediction for new sample: {predicted_label}")
